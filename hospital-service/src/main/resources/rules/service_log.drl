import com.medisec.hospitalservice.logs.service_log.ServiceLog;
import com.medisec.hospitalservice.alarms.service_log_alarm.LogHandler;
import com.medisec.hospitalservice.alarms.service_log_alarm.LogType;
import java.util.Arrays;
import com.medisec.hospitalservice.alarms.service_log_alarm.ServiceLogAlarmService;
import com.medisec.hospitalservice.alarms.service_log_alarm.ServiceLogAlarm;
import com.medisec.hospitalservice.logs.medical_record_log.Severity;

import java.util.UUID;
import java.util.Date;

global ServiceLogAlarmService service;

rule "More than one failed login attempt with the same username"
    when
        $logs : LogHandler(hasMultipleFailedLoginAttempts())
    then
        System.out.println("More than one failed login attempt with the same username");
end

//   TODO: Pogledaj
rule "Attempt to login to an account that has not logged for 90 days"
    when
        log : ServiceLog(time: time, parsePathResource() == "login", $username: parseUsernameParam())
        logs: LogHandler(getInactiveAccounts() contains $username)
    then
        System.out.println("Attempt to login to an account that has not been active for 90 days");
        insert(new ServiceLogAlarm(
            time,
            Severity.LOW,
            "Attempt to login to an account that has not been active for 90 days"
        ));
end

rule "Log type ERROR"
    when
        log : ServiceLog(getType() == LogType.ERROR)
    then
        System.out.println("Log type ERROR");
end

rule "Log type DOS"
    when
        log : ServiceLog(getType() == LogType.DOS_ATTACK)
    then
        System.out.println("Log type DOS attack");
end

rule "Brute force attack"
    when
        log : ServiceLog(getType() == LogType.BRUTE_FORCE_ATTACK)
    then
        System.out.println("Brute force attack");
end

rule "Login or attempt to login from an IP address that is on the list of malicious IP addresses"
    when
        log : ServiceLog(parsePathResource() == "login", $sourceIp: getSourceIp())
        logs: LogHandler(getMaliciousIps() contains $sourceIp)
    then
        System.out.println("Login or attempt to login from an IP address that is on the list of malicious IP addresses");
end

rule "Appearance of a log containing an source IP address from the list of malicious IP addresses"
    when
         log : ServiceLog($sourceIp: getSourceIp())
         logs: LogHandler(getMaliciousIps() contains $sourceIp)
    then
        System.out.println("Appearance of a log containing an IP address from the list of malicious IP addresses");
end

rule "Appearance of a log containing an destination IP address from the list of malicious IP addresses"
    when
         log : ServiceLog($destIp: getDestIp())
         logs: LogHandler(getMaliciousIps() contains $destIp)
    then
        System.out.println("Appearance of a log containing an IP address from the list of malicious IP addresses");
end

rule "30 or more unsuccessful login attempts are registered from the same IP address within 24 hours - add that IP address to the list of malicious IP addresses"
    when
        log : LogHandler(are30LoginAttemptsFailedIn24HoursFromTheSameIpAddress())
    then
        System.out.println("30 or more unsuccessful login attempts are registered from the same IP address within 24 hours!");
end

//rule "Detection of overly frequent requests (more than 50 within 60 seconds)"
//    when
//        logs: Logs();
//        Number(intValue >= 0) from accumulate(
//                 $log : ServiceLog(
//                    parsePathResource() == "login",
//                    status == 400),
//                 count( $log ))
//    then
//        System.out.println("Failed login!");
//end


rule "Insert alaram to service log db"
    when
        log: ServiceLogAlarm(persisted == false)
    then
        modify(log) {
            setPersisted(true)
        };
        service.save(log);
end